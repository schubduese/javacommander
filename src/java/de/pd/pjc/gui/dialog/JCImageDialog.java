/*
 * JCImageDialog.java
 *
 * Created on September 14, 2007, 9:42 AM
 */

package de.pd.pjc.gui.dialog;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;

import javax.swing.ImageIcon;
import javax.swing.JButton;

import de.pd.pjc.FilePatternFilter;
import de.pd.pjc.bean.FileElement;
import de.pd.pjc.gui.ImagePanel;
import de.pd.pjc.gui.JCImageButton;
import de.pd.pjc.gui.MainWindow;
import de.pd.pjc.gui.listener.ImageDialogKeyListener;
import de.pd.pjc.service.ServiceFactory;
import de.pd.pjc.service.impl.FileServiceImpl;
import de.pd.pjc.util.IconFactory;
import de.pd.pjc.util.PJCUtils;

/**
 * @author petros
 */
public class JCImageDialog extends javax.swing.JDialog {

	public int lastWidth = 0;

	public int lastHeight = 0;

	ImagePanel ip = new ImagePanel(this);

	JButton imageButton = new JCImageButton();

	FileElement mCurrentFile;

	ArrayList<FileElement> fileArr = new ArrayList<FileElement>();

	private int mCurrIndex = 0;

	private boolean imageChanged;

	private Dimension mMaxDimension = new Dimension(800, 600);

	private Dimension mMinDimension = new Dimension(300, 200);

	/** Creates new form JCImageDialog */
	public JCImageDialog(java.awt.Frame parent, boolean modal, FileElement pFile) {
		super(parent, modal);
		initComponents();
		mCurrentFile = pFile;

		Dimension resolution = IconFactory.getImageResolution(pFile);
		if (resolution.width > mMaxDimension.width
				|| resolution.height > mMaxDimension.height) {
			setSize(mMaxDimension);
		} else if (resolution.width < mMinDimension.width
				|| resolution.height < mMinDimension.height) {
			setSize(mMinDimension);
		} else {
			setSize(resolution);
		}

		getContentPane().setBackground(Color.black);

		// load the image list
		try {
			ArrayList<FileElement> files = (ArrayList<FileElement>) ServiceFactory
					.getFileService().getFiles(pFile.getParentPath(),
							new FilePatternFilter());
			Collections.sort(files);
			int cnt = 0;
			for (FileElement fileElement : files) {
				if (fileElement.isTopElement() || fileElement.isDirectory()
						|| !FileServiceImpl.isImage(fileElement.getFileName())) {
					continue;
				}
				fileArr.add(fileElement);
				if (fileElement.getAbsolutePath().equals(
						mCurrentFile.getAbsolutePath())) {
					mCurrIndex = cnt;
				}
				// MainWindow.mLog.debug("Added " + fileElement);
				cnt++;
			}

		} catch (FileNotFoundException e) {
			MainWindow.mLog.error(e);
		}

		setCursor(null);

		ImageIcon previewImage = IconFactory.getPreviewImage(pFile, 100, 100);
		imageButton.setIcon(previewImage);
		getContentPane().add(imageButton);

		imageButton.addKeyListener(new ImageDialogKeyListener(this));

		imageButton.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent pE) {
				if (pE.getButton() == MouseEvent.BUTTON3) {
					nextImage(1);
				}
			}

		});

		this.resize();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {

		getContentPane().setLayout(new java.awt.GridLayout(1, 0));

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		addComponentListener(new java.awt.event.ComponentAdapter() {
			public void componentResized(java.awt.event.ComponentEvent evt) {
				formComponentResized(evt);
			}
		});

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void formComponentResized(java.awt.event.ComponentEvent evt) {// GEN-FIRST:event_formComponentResized
		resize();
	}// GEN-LAST:event_formComponentResized

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables

	/**
	 * Switch to next image.
	 * 
	 */
	public void nextImage(int pStep) {
		if(pStep >= fileArr.size()) {
			pStep = fileArr.size();
		}
		if (mCurrIndex + pStep >= fileArr.size()) {
			if (pStep == 1) {
				mCurrIndex = -1;
			} else {
				mCurrIndex = fileArr.size() - 1;
				pStep = 0;
			}
		}
		mCurrentFile = fileArr.get((mCurrIndex += pStep));
		imageChanged = true;
		resize();
	}

	/**
	 * Switch to previous
	 * 
	 */
	public void prevImage(int pStep) {
		if(pStep >= fileArr.size()) {
			pStep = fileArr.size();
		}
		if (mCurrIndex - pStep < 0) {
			if (pStep == 1) {
				mCurrIndex = fileArr.size();
			} else {
				mCurrIndex = 0;
				pStep = 0;
			}
		}
		mCurrentFile = fileArr.get((mCurrIndex -= pStep));
		imageChanged = true;
		resize();
	}

	public void copyImage() {
		PJCUtils.copyToClipboard(new FileElement[] { mCurrentFile });
	}

	/**
	 * Reload the image.
	 * 
	 */
	public void resize() {
		int currWidth = getWidth();
		int currHeight = getHeight();
		if (lastHeight == currHeight && lastWidth == currWidth && !imageChanged) {
			return;
		}
		String title = mCurrentFile.getFileName() + " (" + (mCurrIndex + 1) + "/"
				+ fileArr.size() + ") "
				+ IconFactory.getImageResolutionFormatted(mCurrentFile);
		setTitle(title + " loading...");
		ImageIcon previewImage = IconFactory.getPreviewImage(mCurrentFile,
				currWidth, currHeight);
		imageButton.setIcon(previewImage);
		setTitle(title);

		lastWidth = currWidth;
		lastHeight = currHeight;
	}

	public FileElement getCurrentFile() {
		return mCurrentFile;
	}

	public ArrayList<FileElement> getFileArr() {
		return fileArr;
	}

}
