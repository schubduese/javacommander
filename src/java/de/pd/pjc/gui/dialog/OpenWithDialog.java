/*
 * OpenWithDialog.java
 *
 * Created on January 10, 2007, 11:57 PM
 */

package de.pd.pjc.gui.dialog;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;

import javax.swing.ComboBoxEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.util.StringUtils;

import de.pd.pjc.bean.MimeApplication;
import de.pd.pjc.service.ServiceFactory;
import de.pd.pjc.service.XMLSettingsService;
import de.pd.pjc.util.PJCUtils;

/**
 * 
 * @author petros
 */
public class OpenWithDialog extends javax.swing.JDialog {

	private String mFindName = "";

	private Collection<String> mCheckboxApps = new ArrayList<String>();

	private static Collection<String> mApps = null;
	
	private JTextField mEditorTextField;
	
	protected static Log mLog = LogFactory.getLog(OpenWithDialog.class.getName());
	
	private String mCommand;
	
	private String mExtension;

	
	/** Creates new form OpenWithDialog */
	public OpenWithDialog(java.awt.Frame parent, boolean modal, String pExt) {
		super(parent, modal);
		mExtension = pExt;
		initComponents();

		ComboBoxEditor boxEditor = appBox.getEditor();
		mEditorTextField = (JTextField) boxEditor.getEditorComponent();
		appBox.setModel(new DefaultComboBoxModel());
	
		if(mApps == null) {
			mApps = ServiceFactory.getXMLSettingsService().getCommandHistory();
		}
		updateCheckboxList();
		
		mEditorTextField.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent pE) {
				mApps.add(mEditorTextField.getText());
				mLog.info("added " + mEditorTextField.getText());
				mFindName = "";
				open();
			}
			
		});
		
		mEditorTextField.addKeyListener(new KeyAdapter() {

			
			
			@Override
			public void keyPressed(KeyEvent evt) {
				if(mEditorTextField.getText().length() == 0) {
					mFindName = "";
					updateCheckboxList();
				}
				if (PJCUtils.isKeyboardSearchKeyPressed(evt)) {
					mFindName += (char) evt.getKeyCode();
					appBox.setPopupVisible(false);
				} else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE && mEditorTextField.getText().length() > 0) {
					String selectedText = mEditorTextField.getSelectedText();
					if(selectedText == null) {
						mFindName = mFindName.substring(0, mFindName.length() -1);
					} else {
						mFindName = mEditorTextField.getText().substring(0, mEditorTextField.getSelectionStart());
					}
					appBox.setPopupVisible(false);
//					mFindName = mEditorTextField.getText();
				} else if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
					setVisible(false);
				}
			}

			@Override
			public void keyReleased(KeyEvent evt) {

				mCheckboxApps.clear();

				boolean found = false;
				if (PJCUtils.isKeyboardSearchKeyPressed(evt)) {
					for (String app : mApps) {
						if (app.startsWith(mFindName.toLowerCase())) {
							if (!found) {
								mEditorTextField.setText(app);
								found = true;
							}
							mCheckboxApps.add(app);
						}
					}
				}
				if(found) {
					updateCheckboxList();
					mEditorTextField.setSelectionStart(mFindName.length());
				}
			}

		});
		
		mEditorTextField.setText("");
		
		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		int width = getWidth();
      int height = getHeight();
      setBounds((screenSize.width-width)/2, (screenSize.height-height)/2, width, height);
	}


	private void updateCheckboxList() {
		Collection<String> apps = !StringUtils.hasLength(mEditorTextField.getText()) ? mApps : mCheckboxApps;
		appBox.setModel(new DefaultComboBoxModel(apps.toArray()));
	}
	
	
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        appBox = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbDefault = new javax.swing.JCheckBox();
        cbSave = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open With");
        appBox.setEditable(true);
        appBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        okButton.setMnemonic('r');
        okButton.setText("Run");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setMnemonic('c');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Open with command");

        cbDefault.setMnemonic('d');
        cbDefault.setText("Save as default");
        cbDefault.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbDefault.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cbSave.setMnemonic('s');
        cbSave.setText("Save command");
        cbSave.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbSave.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(cbSave)
                        .add(27, 27, 27)
                        .add(cbDefault))
                    .add(jLabel1)
                    .add(appBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(73, 73, 73))
            .add(layout.createSequentialGroup()
                .add(156, 156, 156)
                .add(okButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelButton)
                .addContainerGap(176, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(appBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbDefault)
                    .add(cbSave))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okButton)
                    .add(cancelButton))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
   	 this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
   	 open();
    }//GEN-LAST:event_okButtonActionPerformed

    private void open() {
   	 XMLSettingsService service = ServiceFactory.getXMLSettingsService();
   	 service.addCommandHistory(mEditorTextField.getText());
   	 mCommand = mEditorTextField.getText();
   	 if(StringUtils.hasLength(mExtension) && cbSave.isSelected()) {
			 String name = JOptionPane.showInputDialog("Application Name");
			 if(name == null) {
				 this.setVisible(false);
				 return;
			 }
			 String icon = JOptionPane.showInputDialog("Icon");
			 MimeApplication mime = new MimeApplication(name, mCommand, icon, null, cbDefault.isSelected());
			 service.storeMimeSettings(mExtension, mime);
   	 }
   	 this.setVisible(false);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox appBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox cbDefault;
    private javax.swing.JCheckBox cbSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables


 	public String getCommand() {
		return mCommand;
	}

}
